schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "cars"
"""
type cars {
  color: String
  condition: String
  description: String

  """An object relationship"""
  file: files
  id: uuid!
  listing_date: timestamptz
  listing_type: String
  location: String
  main_image_id: uuid
  mileage: Int

  """An object relationship"""
  model: models
  model_year: Int
  modifications: Boolean
  price: numeric
  seller_type: String
  sort: Int
  status: String
  title: String
}

"""
order by aggregate values of table "cars"
"""
input cars_aggregate_order_by {
  avg: cars_avg_order_by
  count: order_by
  max: cars_max_order_by
  min: cars_min_order_by
  stddev: cars_stddev_order_by
  stddev_pop: cars_stddev_pop_order_by
  stddev_samp: cars_stddev_samp_order_by
  sum: cars_sum_order_by
  var_pop: cars_var_pop_order_by
  var_samp: cars_var_samp_order_by
  variance: cars_variance_order_by
}

"""
order by avg() on columns of table "cars"
"""
input cars_avg_order_by {
  mileage: order_by
  model_year: order_by
  price: order_by
  sort: order_by
}

"""
Boolean expression to filter rows from the table "cars". All fields are combined with a logical 'AND'.
"""
input cars_bool_exp {
  _and: [cars_bool_exp!]
  _not: cars_bool_exp
  _or: [cars_bool_exp!]
  color: String_comparison_exp
  condition: String_comparison_exp
  description: String_comparison_exp
  file: files_bool_exp
  id: uuid_comparison_exp
  listing_date: timestamptz_comparison_exp
  listing_type: String_comparison_exp
  location: String_comparison_exp
  main_image_id: uuid_comparison_exp
  mileage: Int_comparison_exp
  model: models_bool_exp
  model_year: Int_comparison_exp
  modifications: Boolean_comparison_exp
  price: numeric_comparison_exp
  seller_type: String_comparison_exp
  sort: Int_comparison_exp
  status: String_comparison_exp
  title: String_comparison_exp
}

"""
order by max() on columns of table "cars"
"""
input cars_max_order_by {
  color: order_by
  condition: order_by
  description: order_by
  id: order_by
  listing_date: order_by
  listing_type: order_by
  location: order_by
  main_image_id: order_by
  mileage: order_by
  model_year: order_by
  price: order_by
  seller_type: order_by
  sort: order_by
  status: order_by
  title: order_by
}

"""
order by min() on columns of table "cars"
"""
input cars_min_order_by {
  color: order_by
  condition: order_by
  description: order_by
  id: order_by
  listing_date: order_by
  listing_type: order_by
  location: order_by
  main_image_id: order_by
  mileage: order_by
  model_year: order_by
  price: order_by
  seller_type: order_by
  sort: order_by
  status: order_by
  title: order_by
}

"""Ordering options when selecting data from "cars"."""
input cars_order_by {
  color: order_by
  condition: order_by
  description: order_by
  file: files_order_by
  id: order_by
  listing_date: order_by
  listing_type: order_by
  location: order_by
  main_image_id: order_by
  mileage: order_by
  model: models_order_by
  model_year: order_by
  modifications: order_by
  price: order_by
  seller_type: order_by
  sort: order_by
  status: order_by
  title: order_by
}

"""
select columns of table "cars"
"""
enum cars_select_column {
  """column name"""
  color

  """column name"""
  condition

  """column name"""
  description

  """column name"""
  id

  """column name"""
  listing_date

  """column name"""
  listing_type

  """column name"""
  location

  """column name"""
  main_image_id

  """column name"""
  mileage

  """column name"""
  model_year

  """column name"""
  modifications

  """column name"""
  price

  """column name"""
  seller_type

  """column name"""
  sort

  """column name"""
  status

  """column name"""
  title
}

"""
order by stddev() on columns of table "cars"
"""
input cars_stddev_order_by {
  mileage: order_by
  model_year: order_by
  price: order_by
  sort: order_by
}

"""
order by stddev_pop() on columns of table "cars"
"""
input cars_stddev_pop_order_by {
  mileage: order_by
  model_year: order_by
  price: order_by
  sort: order_by
}

"""
order by stddev_samp() on columns of table "cars"
"""
input cars_stddev_samp_order_by {
  mileage: order_by
  model_year: order_by
  price: order_by
  sort: order_by
}

"""
Streaming cursor of the table "cars"
"""
input cars_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: cars_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input cars_stream_cursor_value_input {
  color: String
  condition: String
  description: String
  id: uuid
  listing_date: timestamptz
  listing_type: String
  location: String
  main_image_id: uuid
  mileage: Int
  model_year: Int
  modifications: Boolean
  price: numeric
  seller_type: String
  sort: Int
  status: String
  title: String
}

"""
order by sum() on columns of table "cars"
"""
input cars_sum_order_by {
  mileage: order_by
  model_year: order_by
  price: order_by
  sort: order_by
}

"""
order by var_pop() on columns of table "cars"
"""
input cars_var_pop_order_by {
  mileage: order_by
  model_year: order_by
  price: order_by
  sort: order_by
}

"""
order by var_samp() on columns of table "cars"
"""
input cars_var_samp_order_by {
  mileage: order_by
  model_year: order_by
  price: order_by
  sort: order_by
}

"""
order by variance() on columns of table "cars"
"""
input cars_variance_order_by {
  mileage: order_by
  model_year: order_by
  price: order_by
  sort: order_by
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "storage.files"
"""
type files {
  bucketId: String!
  createdAt: timestamptz!
  etag: String
  id: uuid!
  isUploaded: Boolean
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz!
  uploadedByUserId: uuid
}

"""
Boolean expression to filter rows from the table "storage.files". All fields are combined with a logical 'AND'.
"""
input files_bool_exp {
  _and: [files_bool_exp!]
  _not: files_bool_exp
  _or: [files_bool_exp!]
  bucketId: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  etag: String_comparison_exp
  id: uuid_comparison_exp
  isUploaded: Boolean_comparison_exp
  metadata: jsonb_comparison_exp
  mimeType: String_comparison_exp
  name: String_comparison_exp
  size: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
  uploadedByUserId: uuid_comparison_exp
}

"""Ordering options when selecting data from "storage.files"."""
input files_order_by {
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  isUploaded: order_by
  metadata: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

"""
select columns of table "storage.files"
"""
enum files_select_column {
  """column name"""
  bucketId

  """column name"""
  createdAt

  """column name"""
  etag

  """column name"""
  id

  """column name"""
  isUploaded

  """column name"""
  metadata

  """column name"""
  mimeType

  """column name"""
  name

  """column name"""
  size

  """column name"""
  updatedAt

  """column name"""
  uploadedByUserId
}

"""
Streaming cursor of the table "files"
"""
input files_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: files_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input files_stream_cursor_value_input {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  metadata: jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "manufacturers"
"""
type manufacturers {
  """An array relationship"""
  models(
    """distinct select on columns"""
    distinct_on: [models_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [models_order_by!]

    """filter the rows returned"""
    where: models_bool_exp
  ): [models!]!
  name: String
}

"""
Boolean expression to filter rows from the table "manufacturers". All fields are combined with a logical 'AND'.
"""
input manufacturers_bool_exp {
  _and: [manufacturers_bool_exp!]
  _not: manufacturers_bool_exp
  _or: [manufacturers_bool_exp!]
  models: models_bool_exp
  name: String_comparison_exp
}

"""Ordering options when selecting data from "manufacturers"."""
input manufacturers_order_by {
  models_aggregate: models_aggregate_order_by
  name: order_by
}

"""
select columns of table "manufacturers"
"""
enum manufacturers_select_column {
  """column name"""
  name
}

"""
Streaming cursor of the table "manufacturers"
"""
input manufacturers_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: manufacturers_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input manufacturers_stream_cursor_value_input {
  name: String
}

"""
columns and relationships of "models"
"""
type models {
  """An array relationship"""
  cars(
    """distinct select on columns"""
    distinct_on: [cars_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cars_order_by!]

    """filter the rows returned"""
    where: cars_bool_exp
  ): [cars!]!

  """An object relationship"""
  manufacturer: manufacturers
  name: String

  """An array relationship"""
  vehicles(
    """distinct select on columns"""
    distinct_on: [cars_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cars_order_by!]

    """filter the rows returned"""
    where: cars_bool_exp
  ): [cars!]!
}

"""
order by aggregate values of table "models"
"""
input models_aggregate_order_by {
  count: order_by
  max: models_max_order_by
  min: models_min_order_by
}

"""
Boolean expression to filter rows from the table "models". All fields are combined with a logical 'AND'.
"""
input models_bool_exp {
  _and: [models_bool_exp!]
  _not: models_bool_exp
  _or: [models_bool_exp!]
  cars: cars_bool_exp
  manufacturer: manufacturers_bool_exp
  name: String_comparison_exp
  vehicles: cars_bool_exp
}

"""
order by max() on columns of table "models"
"""
input models_max_order_by {
  name: order_by
}

"""
order by min() on columns of table "models"
"""
input models_min_order_by {
  name: order_by
}

"""Ordering options when selecting data from "models"."""
input models_order_by {
  cars_aggregate: cars_aggregate_order_by
  manufacturer: manufacturers_order_by
  name: order_by
  vehicles_aggregate: cars_aggregate_order_by
}

"""
select columns of table "models"
"""
enum models_select_column {
  """column name"""
  name
}

"""
Streaming cursor of the table "models"
"""
input models_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: models_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input models_stream_cursor_value_input {
  name: String
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """An array relationship"""
  cars(
    """distinct select on columns"""
    distinct_on: [cars_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cars_order_by!]

    """filter the rows returned"""
    where: cars_bool_exp
  ): [cars!]!

  """fetch data from the table: "cars" using primary key columns"""
  cars_by_pk(id: uuid!): cars

  """fetch data from the table: "storage.files" using primary key columns"""
  file(id: uuid!): files

  """
  fetch data from the table: "storage.files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch data from the table: "manufacturers"
  """
  manufacturers(
    """distinct select on columns"""
    distinct_on: [manufacturers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manufacturers_order_by!]

    """filter the rows returned"""
    where: manufacturers_bool_exp
  ): [manufacturers!]!

  """An array relationship"""
  models(
    """distinct select on columns"""
    distinct_on: [models_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [models_order_by!]

    """filter the rows returned"""
    where: models_bool_exp
  ): [models!]!
}

type subscription_root {
  """An array relationship"""
  cars(
    """distinct select on columns"""
    distinct_on: [cars_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cars_order_by!]

    """filter the rows returned"""
    where: cars_bool_exp
  ): [cars!]!

  """fetch data from the table: "cars" using primary key columns"""
  cars_by_pk(id: uuid!): cars

  """
  fetch data from the table in a streaming manner: "cars"
  """
  cars_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [cars_stream_cursor_input]!

    """filter the rows returned"""
    where: cars_bool_exp
  ): [cars!]!

  """fetch data from the table: "storage.files" using primary key columns"""
  file(id: uuid!): files

  """
  fetch data from the table: "storage.files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch data from the table in a streaming manner: "storage.files"
  """
  files_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [files_stream_cursor_input]!

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch data from the table: "manufacturers"
  """
  manufacturers(
    """distinct select on columns"""
    distinct_on: [manufacturers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manufacturers_order_by!]

    """filter the rows returned"""
    where: manufacturers_bool_exp
  ): [manufacturers!]!

  """
  fetch data from the table in a streaming manner: "manufacturers"
  """
  manufacturers_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [manufacturers_stream_cursor_input]!

    """filter the rows returned"""
    where: manufacturers_bool_exp
  ): [manufacturers!]!

  """An array relationship"""
  models(
    """distinct select on columns"""
    distinct_on: [models_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [models_order_by!]

    """filter the rows returned"""
    where: models_bool_exp
  ): [models!]!

  """
  fetch data from the table in a streaming manner: "models"
  """
  models_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [models_stream_cursor_input]!

    """filter the rows returned"""
    where: models_bool_exp
  ): [models!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
